// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: record.sql

package storage

import (
	"context"

	"github.com/google/uuid"
)

const associateNoteToTag = `-- name: AssociateNoteToTag :exec
insert into record_tag(record_id, tag_id) values ($1, $2)
`

type AssociateNoteToTagParams struct {
	RecordID uuid.UUID
	TagID    string
}

func (q *Queries) AssociateNoteToTag(ctx context.Context, db DBTX, arg AssociateNoteToTagParams) error {
	_, err := db.ExecContext(ctx, associateNoteToTag, arg.RecordID, arg.TagID)
	return err
}

const createRecord = `-- name: CreateRecord :one
insert into record (id, content) values ($1, $2)
returning id
`

type CreateRecordParams struct {
	ID      uuid.UUID
	Content string
}

func (q *Queries) CreateRecord(ctx context.Context, db DBTX, arg CreateRecordParams) (uuid.UUID, error) {
	row := db.QueryRowContext(ctx, createRecord, arg.ID, arg.Content)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getRecordsByTag = `-- name: GetRecordsByTag :many
select id, content, record_id, tag_id from record join record_tag on id=record_id
where tag_id=$1
`

type GetRecordsByTagRow struct {
	ID       uuid.UUID
	Content  string
	RecordID uuid.UUID
	TagID    string
}

func (q *Queries) GetRecordsByTag(ctx context.Context, db DBTX, tagID string) ([]GetRecordsByTagRow, error) {
	rows, err := db.QueryContext(ctx, getRecordsByTag, tagID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRecordsByTagRow
	for rows.Next() {
		var i GetRecordsByTagRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.RecordID,
			&i.TagID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
