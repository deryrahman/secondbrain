// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: record.sql

package storage

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const associateNoteToTag = `-- name: AssociateNoteToTag :exec
insert into record_tag(record_id, tag_id) values ($1, $2)
`

type AssociateNoteToTagParams struct {
	RecordID uuid.UUID
	TagID    string
}

func (q *Queries) AssociateNoteToTag(ctx context.Context, db DBTX, arg AssociateNoteToTagParams) error {
	_, err := db.ExecContext(ctx, associateNoteToTag, arg.RecordID, arg.TagID)
	return err
}

const createRecord = `-- name: CreateRecord :one
insert into record (id, content) values ($1, $2)
returning id
`

type CreateRecordParams struct {
	ID      uuid.UUID
	Content string
}

func (q *Queries) CreateRecord(ctx context.Context, db DBTX, arg CreateRecordParams) (uuid.UUID, error) {
	row := db.QueryRowContext(ctx, createRecord, arg.ID, arg.Content)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getRecordsByTag = `-- name: GetRecordsByTag :many
with records_tags as (
  select distinct(id), content from record join record_tag on id=record_id where tag_id=any($1::text[])
)
select r.id, r.content, array_agg(rt.tag_id)::text[] as tags
from records_tags as r join record_tag as rt on r.id=rt.record_id
group by r.id, r.content
`

type GetRecordsByTagParams struct {
	Column1 []string
}

type GetRecordsByTagRow struct {
	ID      uuid.UUID
	Content string
	Tags    []string
}

func (q *Queries) GetRecordsByTag(ctx context.Context, db DBTX, arg GetRecordsByTagParams) ([]*GetRecordsByTagRow, error) {
	rows, err := db.QueryContext(ctx, getRecordsByTag, pq.Array(arg.Column1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetRecordsByTagRow
	for rows.Next() {
		var i GetRecordsByTagRow
		if err := rows.Scan(&i.ID, &i.Content, pq.Array(&i.Tags)); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
